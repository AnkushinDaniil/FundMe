{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_priceFeed",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__CallFailed",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "FundMe__InsufficientFunding",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "_funderIndex",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x239b0af55198cbe9da01f25c0e59f73f9edef08bf5337f6bc8a32709b0db153a",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "806942",
        "logsBloom": "0x
        "blockHash": "0x2f70ef736b4d92a3868313530c7d4fb4ab0ed32ad05c1e0c7c8556b262c04f08",
        "transactionHash": "0x239b0af55198cbe9da01f25c0e59f73f9edef08bf5337f6bc8a32709b0db153a",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "806942",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "a6a481ec01fe84fa99f9d670549a8ce5",
    "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__InsufficientFunding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_funderIndex\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Daniil Ankushin\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"fund function fuds this contract\"}},\"notice\":\"FundMe contract is to leard blockchain dev tools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"pragma solidity 0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__CallFailed();\\nerror FundMe__InsufficientFunding();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Daniil Ankushin\\n * @notice FundMe contract is to leard blockchain dev tools\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n    address private immutable i_owner;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n    }\\n\\n    constructor(address _priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(_priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice fund function fuds this contract\\n     */\\n    function fund() public payable {\\n        // require(msg.value.getConversionRate() >= MINIMUM_USD, \\\"Didn't send enough\\\");\\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) {\\n            revert FundMe__InsufficientFunding();\\n        }\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        // require(callSuccess, \\\"Call failed\\\");\\n        if (!callSuccess) {\\n            revert FundMe__CallFailed();\\n        }\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 _funderIndex) public view returns (address) {\\n        return s_funders[_funderIndex];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address _funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[_funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xaecb775bd946b844840cddb0132d6ee6950590df51d01725e181f66af74302d4\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet);\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xd7e170a151419408ff9a5eaef161357f771043b31df21997f1b0c61f2ca0b9bc\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a060405234801561001057600080fd5b50604051610e92380380610e9283398181016040528101906100329190610110565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505061013d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dd826100b2565b9050919050565b6100ed816100d2565b81146100f857600080fd5b50565b60008151905061010a816100e4565b92915050565b600060208284031215610126576101256100ad565b5b6000610134848285016100fb565b91505092915050565b608051610d3361015f6000396000818161031801526105c20152610d336000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e8146100ff5780639e87a5cd1461012a578063b60d428814610155578063d7b4750c1461015f57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100b460048036038101906100af919061082e565b6102cd565b6040516100c19190610874565b60405180910390f35b6100d2610316565b005b3480156100e057600080fd5b506100e96105b1565b6040516100f69190610874565b60405180910390f35b34801561010b57600080fd5b506101146105be565b604051610121919061089e565b60405180910390f35b34801561013657600080fd5b5061013f6105e6565b60405161014c9190610918565b60405180910390f35b61015d61019c565b005b34801561016b57600080fd5b506101866004803603810190610181919061095f565b610610565b604051610193919061089e565b60405180910390f35b6802b5e3af16b18800006101db600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065790919063ffffffff16565b1015610212576040517ef0638d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c491906109bb565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561041e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103d4575b5050505050905060005b81518110156104a9576000828281518110610446576104456109ef565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a190610a1e565b915050610428565b50600067ffffffffffffffff8111156104c5576104c4610a66565b5b6040519080825280602002602001820160405280156104f35781602001602082028036833780820191505090505b5060009080519060200190610509929190610724565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161053090610ac6565b60006040518083038185875af1925050503d806000811461056d576040519150601f19603f3d011682016040523d82523d6000602084013e610572565b606091505b50509050806105ad576040517fa6139a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808281548110610625576106246109ef565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066383610693565b90506000670de0b6b3a7640000858361067c9190610adb565b6106869190610b4c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190610c0a565b5050509150506402540be4008161071c9190610c85565b915050919050565b82805482825590600052602060002090810192821561079d579160200282015b8281111561079c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610744565b5b5090506107aa91906107ae565b5090565b5b808211156107c75760008160009055506001016107af565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107fb826107d0565b9050919050565b61080b816107f0565b811461081657600080fd5b50565b60008135905061082881610802565b92915050565b600060208284031215610844576108436107cb565b5b600061085284828501610819565b91505092915050565b6000819050919050565b61086e8161085b565b82525050565b60006020820190506108896000830184610865565b92915050565b610898816107f0565b82525050565b60006020820190506108b3600083018461088f565b92915050565b6000819050919050565b60006108de6108d96108d4846107d0565b6108b9565b6107d0565b9050919050565b60006108f0826108c3565b9050919050565b6000610902826108e5565b9050919050565b610912816108f7565b82525050565b600060208201905061092d6000830184610909565b92915050565b61093c8161085b565b811461094757600080fd5b50565b60008135905061095981610933565b92915050565b600060208284031215610975576109746107cb565b5b60006109838482850161094a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c68261085b565b91506109d18361085b565b92508282019050808211156109e9576109e861098c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a298261085b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5b57610a5a61098c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ab0600083610a95565b9150610abb82610aa0565b600082019050919050565b6000610ad182610aa3565b9150819050919050565b6000610ae68261085b565b9150610af18361085b565b9250828202610aff8161085b565b91508282048414831517610b1657610b1561098c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b578261085b565b9150610b628361085b565b925082610b7257610b71610b1d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b9c81610b7d565b8114610ba757600080fd5b50565b600081519050610bb981610b93565b92915050565b6000819050919050565b610bd281610bbf565b8114610bdd57600080fd5b50565b600081519050610bef81610bc9565b92915050565b600081519050610c0481610933565b92915050565b600080600080600060a08688031215610c2657610c256107cb565b5b6000610c3488828901610baa565b9550506020610c4588828901610be0565b9450506040610c5688828901610bf5565b9350506060610c6788828901610bf5565b9250506080610c7888828901610baa565b9150509295509295909350565b6000610c9082610bbf565b9150610c9b83610bbf565b9250828202610ca981610bbf565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ce157610ce061098c565b5b8282058414831517610cf657610cf561098c565b5b509291505056fea2646970667358221220c399f34b4abeeefa2e0c34330ea2d45ed5e8b107123f9960355728bbbb55529a64736f6c63430008130033",
    "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e8146100ff5780639e87a5cd1461012a578063b60d428814610155578063d7b4750c1461015f57610083565b80630343fb251461008d5780633ccfd60b146100ca5780636b69a592146100d457610083565b366100835761008161019c565b005b61008b61019c565b005b34801561009957600080fd5b506100b460048036038101906100af919061082e565b6102cd565b6040516100c19190610874565b60405180910390f35b6100d2610316565b005b3480156100e057600080fd5b506100e96105b1565b6040516100f69190610874565b60405180910390f35b34801561010b57600080fd5b506101146105be565b604051610121919061089e565b60405180910390f35b34801561013657600080fd5b5061013f6105e6565b60405161014c9190610918565b60405180910390f35b61015d61019c565b005b34801561016b57600080fd5b506101866004803603810190610181919061095f565b610610565b604051610193919061089e565b60405180910390f35b6802b5e3af16b18800006101db600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461065790919063ffffffff16565b1015610212576040517ef0638d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c491906109bb565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561041e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103d4575b5050505050905060005b81518110156104a9576000828281518110610446576104456109ef565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806104a190610a1e565b915050610428565b50600067ffffffffffffffff8111156104c5576104c4610a66565b5b6040519080825280602002602001820160405280156104f35781602001602082028036833780820191505090505b5060009080519060200190610509929190610724565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161053090610ac6565b60006040518083038185875af1925050503d806000811461056d576040519150601f19603f3d011682016040523d82523d6000602084013e610572565b606091505b50509050806105ad576040517fa6139a6400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808281548110610625576106246109ef565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061066383610693565b90506000670de0b6b3a7640000858361067c9190610adb565b6106869190610b4c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190610c0a565b5050509150506402540be4008161071c9190610c85565b915050919050565b82805482825590600052602060002090810192821561079d579160200282015b8281111561079c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610744565b5b5090506107aa91906107ae565b5090565b5b808211156107c75760008160009055506001016107af565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107fb826107d0565b9050919050565b61080b816107f0565b811461081657600080fd5b50565b60008135905061082881610802565b92915050565b600060208284031215610844576108436107cb565b5b600061085284828501610819565b91505092915050565b6000819050919050565b61086e8161085b565b82525050565b60006020820190506108896000830184610865565b92915050565b610898816107f0565b82525050565b60006020820190506108b3600083018461088f565b92915050565b6000819050919050565b60006108de6108d96108d4846107d0565b6108b9565b6107d0565b9050919050565b60006108f0826108c3565b9050919050565b6000610902826108e5565b9050919050565b610912816108f7565b82525050565b600060208201905061092d6000830184610909565b92915050565b61093c8161085b565b811461094757600080fd5b50565b60008135905061095981610933565b92915050565b600060208284031215610975576109746107cb565b5b60006109838482850161094a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109c68261085b565b91506109d18361085b565b92508282019050808211156109e9576109e861098c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a298261085b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a5b57610a5a61098c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ab0600083610a95565b9150610abb82610aa0565b600082019050919050565b6000610ad182610aa3565b9150819050919050565b6000610ae68261085b565b9150610af18361085b565b9250828202610aff8161085b565b91508282048414831517610b1657610b1561098c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b578261085b565b9150610b628361085b565b925082610b7257610b71610b1d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610b9c81610b7d565b8114610ba757600080fd5b50565b600081519050610bb981610b93565b92915050565b6000819050919050565b610bd281610bbf565b8114610bdd57600080fd5b50565b600081519050610bef81610bc9565b92915050565b600081519050610c0481610933565b92915050565b600080600080600060a08688031215610c2657610c256107cb565b5b6000610c3488828901610baa565b9550506020610c4588828901610be0565b9450506040610c5688828901610bf5565b9350506060610c6788828901610bf5565b9250506080610c7888828901610baa565b9150509295509295909350565b6000610c9082610bbf565b9150610c9b83610bbf565b9250828202610ca981610bbf565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610ce157610ce061098c565b5b8282058414831517610cf657610cf561098c565b5b509291505056fea2646970667358221220c399f34b4abeeefa2e0c34330ea2d45ed5e8b107123f9960355728bbbb55529a64736f6c63430008130033",
    "devdoc": {
        "author": "Daniil Ankushin",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {},
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "fund function fuds this contract"
            }
        },
        "notice": "FundMe contract is to leard blockchain dev tools",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 67,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 71,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
